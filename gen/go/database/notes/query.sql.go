// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package notes

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
insert into note (
  name, content, created_at, updated_at
) values (
  ?, ?, current_timestamp, current_timestamp
)
returning id, name, content, created_at, updated_at
`

type CreateNoteParams struct {
	Name    string
	Content sql.NullString
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.Name, arg.Content)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteNote = `-- name: DeleteNote :exec
delete from note where id = ?
`

func (q *Queries) DeleteNote(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one

select id, name, content, created_at, updated_at from note where id = ? limit 1
`

// @formatter:off
func (q *Queries) GetNote(ctx context.Context, id int64) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
select id, name, content, created_at, updated_at
from note
order by id
limit ?
offset ?
`

type ListNotesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
update note
set
  name = ?,
  content = ?,
  updated_at = current_timestamp
where id = ?
returning id, name, content, created_at, updated_at
`

type UpdateNoteParams struct {
	Name    string
	Content sql.NullString
	ID      int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.Name, arg.Content, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
